// json-rules-engine d√πng gi·∫£i thu·∫≠t RETE ƒë·ªÉ th·ª±c thi c√°c quy t·∫Øc

// Th∆∞ vi·ªán json-rules-engine d√πng gi·∫£i thu·∫≠t RETE ƒë·ªÉ th·ª±c thi c√°c quy t·∫Øc.
//RETE l√† m·ªôt gi·∫£i thu·∫≠t d·ª±a tr√™n ƒë·ªì th·ªã ƒë∆∞·ª£c ph√°t tri·ªÉn ƒë·ªÉ x·ª≠ l√Ω c√°c h·ªá th·ªëng chuy√™n gia (expert systems). Gi·∫£i thu·∫≠t RETE ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi Charles Forgy v√†o nƒÉm 1979 v√† v·∫´n ƒë∆∞·ª£c s·ª≠ d·ª•ng r·ªông r√£i trong c

// Gi·∫£i thu·∫≠t RETE c√≥ th·ªÉ ƒë√°nh gi√° m·ªôt t·∫≠p h·ª£p c√°c quy t·∫Øc v·ªõi c√°c ƒëi·ªÅu ki·ªán
//ph·ª©c t·∫°p v√† c√°c s·ª± ki·ªán ƒë·∫ßu v√†o m·ªôt c√°ch hi·ªáu qu·∫£. RETE c·∫£i thi·ªán hi·ªáu su·∫•t b·∫±ng c√°ch l∆∞u tr·ªØ c√°c ƒëi·ªÅu ki·ªán c·ªßa c√°c quy t·∫Øc trong m·ªôt c·∫•u tr√∫c d·ªØ li·ªáu ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a ƒë·ªÉ nhanh ch√≥ng ƒë·ªëi s√°nh v·ªõi c√°c s·ª± ki·ªán m·ªõi ƒë·∫ßu v√†o.

// Do ƒë√≥, RETE ƒë∆∞·ª£c s·ª≠ d·ª•ng r·ªông r√£i trong c√°c h·ªá th·ªëng logic d·ª±a tr√™n quy t·∫Øc,
//c√°c h·ªá th·ªëng tr√≠ tu·ªá nh√¢n t·∫°o, v√† c√°c ·ª©ng d·ª•ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ ƒë·ªÉ ph√¢n t√≠ch v√† ƒë∆∞a ra c√°c quy·∫øt ƒë·ªãnh d·ª±a tr√™n c√°c lu·∫≠t v√† d·ªØ li·ªáu ƒë·∫ßu v√†o.

import { Engine } from "json-rules-engine";
import ruleModel from "../models/rule.model.js";

const changeStream = ruleModel.watch();
const ruleBradycardia = [];
const ruleNormal = [];
const ruleTachycardia = [];

async function getRules() {
  ruleModel.find({}).then((rules) => {
    console.log("üöÄ ~ file: conditionsRule.js:22 ~ ruleModel.find ~ rules:", rules)
    rules.forEach((rule) => {
    if (rule.name === "Bradycardia") {
      ruleBradycardia.push(rule);
    } else if (rule.name === "Normal") {
      ruleNormal.push(rule);
    } else if (rule.name === "Tachycardia") {
      ruleTachycardia.push(rule);
    }
  });
    console.log("üöÄ ~ file: conditionsRule.js:25 ~ ruleModel.find ~ ruleBradycardia:", ruleBradycardia)
  });
}

changeStream.on("change", (change) => {
  ruleModel
    .findOne({ _id: change.documentKey._id })
    .then((rules) => {
      if (rules.name === "Bradycardia") {
        ruleBradycardia.pop();
        ruleBradycardia.push(rules);
      } else if (rules.name === "Normal") {
        ruleNormal.pop();
        ruleNormal.push(rules);
      } else if (rules.name === "Tachycardia") {
        ruleTachycardia.pop();
        ruleTachycardia.push(rules);
      }
    })
    .catch((error) => {
      console.error("Error getting user:", error);
    });
});

const conditionRule = (bmp) => {
  if (
    bmp > ruleBradycardia[0].heartRateFrom &&
    bmp < ruleBradycardia[0].heartRateTo
  ) {
    return "Heart rate is falling, immediately check the heart rate monitor and monitor the patient's health status";
  } else if (
    bmp > ruleNormal[0].heartRateFrom &&
    bmp < ruleNormal[0].heartRateTo
  ) {
    return "This patient's heart rate is normal, please continue to monitor the patient's health.";
  } else if (
    bmp > ruleTachycardia[0].heartRateFrom &&
    bmp < ruleTachycardia[0].heartRateTo
  ) {
    return "The heart rate is increasing suddenly, now check the heart rate monitor again and monitor the patient's health status";
  } else {
    return "This patient's heart rate is too high, intervene immediately.";
  }
};

const conditionRuleHistory = (bmp) => {
  // Khai b√°o bi·∫øn bpmHistory (l·ªãch s·ª≠ nh·ªãp tim)
  let bpmHistory = bmp;

  // Khai b√°o bi·∫øn highBpmCount (s·ªë l·∫ßn nh·ªãp tim giao ƒë·ªông cao trong 5 ph√∫t)
  let highBpmCount = 0;

  // Ki·ªÉm tra l·ªãch s·ª≠ nh·ªãp tim v√† tƒÉng gi√° tr·ªã highBpmCount n·∫øu nh·ªãp tim cao
  for (let i = 0; i < bpmHistory.length; i++) {
    if (bpmHistory[i] > 100) {
      highBpmCount++;
    }
  }

  // Ki·ªÉm tra s·ªë l·∫ßn nh·ªãp tim giao ƒë·ªông cao v√† in ra c·∫£nh b√°o t∆∞∆°ng ·ª©ng
  if (highBpmCount > 3 && highBpmCount < 6) {
    console.log(
      "B·∫°n ƒë√£ c√≥ nhi·ªÅu l·∫ßn nh·ªãp tim giao ƒë·ªông cao trong v√≤ng 5 ph√∫t g·∫ßn ƒë√¢y. ƒêi·ªÅu n√†y c√≥ th·ªÉ l√† d·∫•u hi·ªáu c·ªßa m·ªôt s·ªë v·∫•n ƒë·ªÅ tim m·∫°ch nh∆∞ tƒÉng huy·∫øt √°p, lo·∫°n nh·ªãp ho·∫∑c nh·ªìi m√°u c∆° tim. H√£y ƒë·∫øn g·∫∑p b√°c sƒ© ƒë·ªÉ ƒë∆∞·ª£c ki·ªÉm tra v√† ch·∫©n ƒëo√°n ch√≠nh x√°c."
    );
  } else if (highBpmCount >= 6) {
    console.log(
      "B·∫°n ƒë√£ c√≥ qu√° nhi·ªÅu l·∫ßn nh·ªãp tim giao ƒë·ªông cao trong v√≤ng 5 ph√∫t g·∫ßn ƒë√¢y. ƒêi·ªÅu n√†y c√≥ th·ªÉ l√† d·∫•u hi·ªáu c·ªßa c√°c v·∫•n ƒë·ªÅ tim m·∫°ch nghi√™m tr·ªçng nh∆∞ nh·ªìi m√°u c∆° tim, r·ªëi lo·∫°n nh·ªãp hay ƒë·ªôt qu·ªµ. H√£y g·ªçi ngay xe c·∫•p c·ª©u ho·∫∑c ƒë·∫øn g·∫•p ph√≤ng c·∫•p c·ª©u ƒë·ªÉ ƒë∆∞·ª£c chƒÉm s√≥c v√† ƒëi·ªÅu tr·ªã k·ªãp th·ªùi."
    );
  } else {
    console.log("Nh·ªãp tim c·ªßa b·∫°n trong kho·∫£ng b√¨nh th∆∞·ªùng.");
  }
};

const rule = {
  conditions: {
    all: [
      {
        fact: "customer",
        path: "$.age",
        operator: "greaterThanInclusive",
        value: 18,
      },
      {
        fact: "customer",
        path: "$.orders",
        operator: "greaterThan",
        value: 5,
      },
    ],
  },
  event: {
    type: "eligible for discount",
    params: {
      discount: 10,
    },
  },
};

// T·∫°o engine v√† th√™m quy t·∫Øc
const engine = new Engine();
engine.addRule(rule);

// Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
const customer = {
  name: "John",
  age: 25,
  orders: 6,
};

// Th·ª±c hi·ªán quy t·∫Øc v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
engine.run({ customer }).then((results) => {
  results.events.map((event) => console.log(event.params));
});

export default { conditionRule, conditionRuleHistory, getRules };
